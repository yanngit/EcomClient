/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import entity.BeverageEntity;
import entity.CocktailEntity;
import entity.DecorationEntity;
import java.text.Normalizer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import pojo.CocktailFlavorEnum;
import pojo.CocktailPowerEnum;
import pojo.Deliverable;

/**
 *
 * @author Alexis BRENON <brenon.alexis@gmail.com>
 */
public class cocktailsPanel extends javax.swing.JPanel {

    /**
     * Creates new form cocktailsPanel
     */
    public cocktailsPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        cocktailTable = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        fieldsPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cocktailNameField = new javax.swing.JTextField();
        cocktailPhotoField = new javax.swing.JTextField();
        cocktailFlavorCombo = new javax.swing.JComboBox();
        cocktailPowerCombo = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        cocktailRecipeText = new javax.swing.JTextArea();
        jSeparator3 = new javax.swing.JSeparator();
        beveragesPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        avalaibleBevList = new javax.swing.JTable();
        removeBeverageButton = new javax.swing.JButton();
        addBeverageButton = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        cocktailBevList = new javax.swing.JTable();
        jSeparator4 = new javax.swing.JSeparator();
        decoPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        avalaibleDecoList = new javax.swing.JTable();
        removeDecoButton = new javax.swing.JButton();
        addDecoButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        cocktailDecoList = new javax.swing.JTable();
        jSeparator6 = new javax.swing.JSeparator();
        buttonsPanel = new javax.swing.JPanel();
        deleteButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        validateButton = new javax.swing.JButton();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        cocktailTable.setAutoCreateRowSorter(true);
        cocktailTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nom", "Prix", "Photo", "Goût", "Puissance"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        cocktailTable.setDoubleBuffered(true);
        cocktailTable.setFillsViewportHeight(true);
        cocktailTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        cocktailTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cocktailTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(cocktailTable);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.PAGE_AXIS));

        java.awt.GridBagLayout jPanel5Layout = new java.awt.GridBagLayout();
        jPanel5Layout.columnWeights = new double[] {1.0, 1.0, 10.0};
        fieldsPanel.setLayout(jPanel5Layout);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setLabelFor(cocktailNameField);
        jLabel2.setText("Nom :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        fieldsPanel.add(jLabel2, gridBagConstraints);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setLabelFor(cocktailPhotoField);
        jLabel1.setText("Photo :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        fieldsPanel.add(jLabel1, gridBagConstraints);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel7.setLabelFor(cocktailFlavorCombo);
        jLabel7.setText("Goût :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        fieldsPanel.add(jLabel7, gridBagConstraints);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel8.setLabelFor(cocktailPowerCombo);
        jLabel8.setText("Puissance :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        fieldsPanel.add(jLabel8, gridBagConstraints);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel4.setText("Recette :");
        jLabel4.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        fieldsPanel.add(jLabel4, gridBagConstraints);

        cocktailNameField.setPreferredSize(new java.awt.Dimension(200, 19));
        cocktailNameField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                cocktailNameFieldCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        fieldsPanel.add(cocktailNameField, gridBagConstraints);

        cocktailPhotoField.setPreferredSize(new java.awt.Dimension(200, 19));
        cocktailPhotoField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cocktailFormFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        fieldsPanel.add(cocktailPhotoField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        fieldsPanel.add(cocktailFlavorCombo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        fieldsPanel.add(cocktailPowerCombo, gridBagConstraints);

        jScrollPane3.setPreferredSize(new java.awt.Dimension(223, 150));

        cocktailRecipeText.setColumns(20);
        cocktailRecipeText.setRows(5);
        cocktailRecipeText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cocktailFormFocusLost(evt);
            }
        });
        jScrollPane3.setViewportView(cocktailRecipeText);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        fieldsPanel.add(jScrollPane3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        fieldsPanel.add(jSeparator3, gridBagConstraints);

        jPanel1.add(fieldsPanel);

        java.awt.GridBagLayout jPanel2Layout = new java.awt.GridBagLayout();
        jPanel2Layout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0};
        jPanel2Layout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        jPanel2Layout.columnWeights = new double[] {0.1, 0.1, 1.0, 0.1, 1.0, 0.1, 1.0};
        jPanel2Layout.rowWeights = new double[] {1.0, 0.0, 1.0, 0.0, 1.0};
        beveragesPanel.setLayout(jPanel2Layout);

        jLabel3.setText("Boissons :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        beveragesPanel.add(jLabel3, gridBagConstraints);

        jLabel11.setText("Disponibles :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        beveragesPanel.add(jLabel11, gridBagConstraints);

        avalaibleBevList.setAutoCreateRowSorter(true);
        avalaibleBevList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Disponibles"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane9.setViewportView(avalaibleBevList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridheight = 3;
        beveragesPanel.add(jScrollPane9, gridBagConstraints);

        removeBeverageButton.setText("<<");
        removeBeverageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBeverageButtonActionPerformed(evt);
            }
        });
        removeBeverageButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cocktailFormFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        beveragesPanel.add(removeBeverageButton, gridBagConstraints);

        addBeverageButton.setText(">>");
        addBeverageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBeverageButtonActionPerformed(evt);
            }
        });
        addBeverageButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cocktailFormFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        beveragesPanel.add(addBeverageButton, gridBagConstraints);

        jLabel10.setText("Nécessaires :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        beveragesPanel.add(jLabel10, gridBagConstraints);

        cocktailBevList.setAutoCreateRowSorter(true);
        cocktailBevList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nécessaires"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(cocktailBevList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridheight = 3;
        beveragesPanel.add(jScrollPane4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        beveragesPanel.add(jSeparator4, gridBagConstraints);

        jPanel1.add(beveragesPanel);

        java.awt.GridBagLayout jPanel3Layout = new java.awt.GridBagLayout();
        jPanel3Layout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0};
        jPanel3Layout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        jPanel3Layout.columnWeights = new double[] {0.1, 0.1, 1.0, 0.1, 1.0, 0.1, 1.0};
        jPanel3Layout.rowWeights = new double[] {1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0};
        decoPanel.setLayout(jPanel3Layout);

        jLabel5.setText("Décorations :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        decoPanel.add(jLabel5, gridBagConstraints);

        jLabel6.setText("Disponibles :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        decoPanel.add(jLabel6, gridBagConstraints);

        avalaibleDecoList.setAutoCreateRowSorter(true);
        avalaibleDecoList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nom"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane11.setViewportView(avalaibleDecoList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridheight = 3;
        decoPanel.add(jScrollPane11, gridBagConstraints);

        removeDecoButton.setText("<<");
        removeDecoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeDecoButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        decoPanel.add(removeDecoButton, gridBagConstraints);

        addDecoButton.setText(">>");
        addDecoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDecoButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        decoPanel.add(addDecoButton, gridBagConstraints);

        jLabel9.setText("Nécessaires :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        decoPanel.add(jLabel9, gridBagConstraints);

        cocktailDecoList.setAutoCreateRowSorter(true);
        cocktailDecoList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nom"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane10.setViewportView(cocktailDecoList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridheight = 3;
        decoPanel.add(jScrollPane10, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        decoPanel.add(jSeparator6, gridBagConstraints);

        jPanel1.add(decoPanel);

        buttonsPanel.setLayout(new java.awt.BorderLayout());

        deleteButton.setText("Supprimer");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        buttonsPanel.add(deleteButton, java.awt.BorderLayout.WEST);

        cancelButton.setText("Annuler");
        cancelButton.setEnabled(false);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        buttonsPanel.add(cancelButton, java.awt.BorderLayout.EAST);

        validateButton.setText("Créer");
        validateButton.setEnabled(false);
        validateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validateButtonActionPerformed(evt);
            }
        });
        buttonsPanel.add(validateButton, java.awt.BorderLayout.CENTER);

        jPanel1.add(buttonsPanel);

        jScrollPane2.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 714, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addBeverageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBeverageButtonActionPerformed
        List<List> availableBevVector = ((DefaultTableModel) avalaibleBevList.getModel()).getDataVector();
        List<List> cocktailBevVector = ((DefaultTableModel) cocktailBevList.getModel()).getDataVector();
        int row = avalaibleBevList.getSelectedRow();
        List bev = availableBevVector.get(row);

        Long bevID = (Long) bev.get(0);
        BeverageEntity bevEntity = TchinTchinAdminFrame.adminFacade.getBeverage(bevID);
        if (currentCocktail.getDeliverables() == null) {
            currentCocktail.setDeliverables((List) new ArrayList<>());
        }
        currentCocktail.getDeliverables().add(bevEntity);

        cocktailBevVector.add(bev);
        availableBevVector.remove(bev);

        ((DefaultTableModel) avalaibleBevList.getModel()).setDataVector(
                (Vector) availableBevVector,
                new Vector(Arrays.asList(deliverableTableColumn)));
        ((DefaultTableModel) cocktailBevList.getModel()).setDataVector(
                (Vector) cocktailBevVector,
                new Vector(Arrays.asList(deliverableTableColumn)));
    }//GEN-LAST:event_addBeverageButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if (JOptionPane.showConfirmDialog(this,
                "Êtes-vous sûr de vouloir supprimer ce cocktail :\n"
                + currentCocktail.getName(),
                "Suppression d'un cocktail",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {

            TchinTchinAdminFrame.adminFacade.removeCocktail(currentCocktail);
            int removedRow = cocktailTable.getSelectedRow();
            ((DefaultTableModel) cocktailTable.getModel()).fireTableRowsDeleted(removedRow, removedRow);
            ((DefaultTableModel) cocktailTable.getModel()).removeRow(removedRow);

            JOptionPane.showMessageDialog(this,
                    "Cocktail supprimé !",
                    "Suppression d'un cocktail",
                    JOptionPane.WARNING_MESSAGE);
            this.cancelButtonActionPerformed(evt);
        } else {
            JOptionPane.showMessageDialog(this,
                    "Le cocktail n'a pas été supprimé !",
                    "Suppression d'un cocktail",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        cocktailNameField.setText("");
        cocktailPhotoField.setText(cocktailNameField.getText());
        cocktailFlavorCombo.setSelectedIndex(0);
        cocktailPowerCombo.setSelectedIndex(0);
        cocktailRecipeText.setText("");

        List<List> availableBevVector = ((DefaultTableModel) avalaibleBevList.getModel()).getDataVector();
        List<List> cocktailBevVector = ((DefaultTableModel) cocktailBevList.getModel()).getDataVector();
        Iterator<List> it = cocktailBevVector.iterator();
        while (it.hasNext()) {
            List value = it.next();
            availableBevVector.add(value);
        }
        cocktailBevVector.clear();
        List<List> availableDecoVector = ((DefaultTableModel) avalaibleDecoList.getModel()).getDataVector();
        List<List> cocktailDecoVector = ((DefaultTableModel) cocktailDecoList.getModel()).getDataVector();
        Iterator<List> itDeco = cocktailDecoVector.iterator();
        while (itDeco.hasNext()) {
            List value = itDeco.next();
            availableDecoVector.add(value);
        }
        cocktailDecoVector.clear();

        ((DefaultTableModel) avalaibleBevList.getModel()).setDataVector(
                (Vector) availableBevVector,
                new Vector<>(Arrays.asList(deliverableTableColumn)));
        ((DefaultTableModel) cocktailBevList.getModel()).setDataVector(
                (Vector) cocktailBevVector,
                new Vector<>(Arrays.asList(deliverableTableColumn)));
        ((DefaultTableModel) avalaibleDecoList.getModel()).setDataVector(
                (Vector) availableDecoVector,
                new Vector<>(Arrays.asList(deliverableTableColumn)));
        ((DefaultTableModel) cocktailDecoList.getModel()).setDataVector(
                (Vector) cocktailDecoVector,
                new Vector<>(Arrays.asList(deliverableTableColumn)));

        validateButton.setText("Créer");
        validateButton.setEnabled(false);
        cancelButton.setEnabled(false);
        deleteButton.setEnabled(false);

        currentCocktail = new CocktailEntity();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void cocktailFormFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cocktailFormFocusLost
        if (!cocktailNameField.getText().isEmpty()
                && !cocktailPhotoField.getText().isEmpty()
                && !cocktailRecipeText.getText().isEmpty()
                && cocktailBevList.getModel().getRowCount() > 0) {
            cancelButton.setEnabled(true);
            validateButton.setEnabled(true);
        } else {
            validateButton.setEnabled(false);
        }
    }//GEN-LAST:event_cocktailFormFocusLost

    private void validateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validateButtonActionPerformed
        currentCocktail.setName(cocktailNameField.getText());
        currentCocktail.setPhotoURI(cocktailPhotoField.getText());
        currentCocktail.setFlavor((CocktailFlavorEnum) cocktailFlavorCombo.getSelectedItem());
        currentCocktail.setPower((CocktailPowerEnum) cocktailPowerCombo.getSelectedItem());
        currentCocktail.setRecipe(cocktailRecipeText.getText());

        /* Create list of deliverables */
        /* List of deliverables is already defined */
        /*List<Deliverable> deliverables = new ArrayList<>();
         List<List> cocktailBevVector = ((DefaultTableModel) cocktailBevList.getModel()).getDataVector();
         Iterator<List> it = cocktailBevVector.iterator();
         while (it.hasNext()) {
         List value = it.next();
         deliverables.add(TchinTchinAdminFrame.adminFacade.getBeverage((Long) value.get(0)));
         }
         currentCocktail.setDeliverables(deliverables);*/

        String dialogTitle;
        String dialogContent;

        /* If we are creating a new cocktail */
        if (currentCocktail.getID() == null) {
            // Add new one to database
            currentCocktail = TchinTchinAdminFrame.adminFacade.addCocktail(currentCocktail);
            // Update the table display
            addCocktailToTable(currentCocktail);

            dialogTitle = "Création d'un cocktail";
            dialogContent = "Le cocktail a été créé avec succès !";
        } /* We are updating an already present one */ else {
            // Update it in database
            TchinTchinAdminFrame.adminFacade.updateCocktail(currentCocktail);
            // Update in table
            DefaultTableModel tableModel = (DefaultTableModel) cocktailTable.getModel();
            int rowToUpdate = cocktailTable.getSelectedRow();
            tableModel.setValueAt(currentCocktail.getName(), rowToUpdate, 1);
            tableModel.setValueAt(currentCocktail.getPrice(), rowToUpdate, 2);
            tableModel.setValueAt(currentCocktail.getPhotoURI(), rowToUpdate, 3);
            tableModel.setValueAt(currentCocktail.getFlavor().toString(), rowToUpdate, 4);
            tableModel.setValueAt(currentCocktail.getPower().toString(), rowToUpdate, 5);

            dialogTitle = "Modification d'un cocktail";
            dialogContent = "Le cocktail a été modifiée avec succès !";
        }
        JOptionPane.showMessageDialog(this, dialogContent, dialogTitle, JOptionPane.INFORMATION_MESSAGE);
        this.cancelButtonActionPerformed(evt);
    }//GEN-LAST:event_validateButtonActionPerformed

    private void removeBeverageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBeverageButtonActionPerformed
        List<List> availableBevVector = ((DefaultTableModel) avalaibleBevList.getModel()).getDataVector();
        List<List> cocktailBevVector = ((DefaultTableModel) cocktailBevList.getModel()).getDataVector();
        int row = cocktailBevList.getSelectedRow();
        List bev = cocktailBevVector.get(row);

        Long bevID = (Long) bev.get(0);
        BeverageEntity bevEntity = TchinTchinAdminFrame.adminFacade.getBeverage(bevID);
        if (currentCocktail.getDeliverables() == null) {
            currentCocktail.setDeliverables((List) new ArrayList<>());
        }
        currentCocktail.getDeliverables().remove(bevEntity);

        cocktailBevVector.remove(bev);
        availableBevVector.add(bev);

        ((DefaultTableModel) avalaibleBevList.getModel()).setDataVector(
                (Vector) availableBevVector,
                new Vector(Arrays.asList(deliverableTableColumn)));
        ((DefaultTableModel) cocktailBevList.getModel()).setDataVector(
                (Vector) cocktailBevVector,
                new Vector(Arrays.asList(deliverableTableColumn)));
    }//GEN-LAST:event_removeBeverageButtonActionPerformed

    private void cocktailNameFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_cocktailNameFieldCaretUpdate
        String photo;
        /* Remove spaces */
        photo = cocktailNameField.getText().replace(' ', '_');
        /* Remove accents */
        photo = Normalizer.normalize(photo, Normalizer.Form.NFD).replaceAll("[^\\p{ASCII}]", "");
        cocktailPhotoField.setText(photo + ".png");
    }//GEN-LAST:event_cocktailNameFieldCaretUpdate

    private void removeDecoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeDecoButtonActionPerformed
        List<List> availableDecoVector = ((DefaultTableModel) avalaibleDecoList.getModel()).getDataVector();
        List<List> cocktailDecoVector = ((DefaultTableModel) cocktailDecoList.getModel()).getDataVector();
        int row = cocktailDecoList.getSelectedRow();
        List deco = cocktailDecoVector.get(row);

        Long decoID = (Long) deco.get(0);
        DecorationEntity decoEntity = TchinTchinAdminFrame.adminFacade.getDecoration(decoID);
        if (currentCocktail.getDeliverables() == null) {
            currentCocktail.setDeliverables((List) new ArrayList<>());
        }
        cocktailDecoVector.remove(deco);
        availableDecoVector.add(deco);

        ((DefaultTableModel) avalaibleDecoList.getModel()).setDataVector(
                (Vector) availableDecoVector,
                new Vector(Arrays.asList(deliverableTableColumn)));
        ((DefaultTableModel) cocktailDecoList.getModel()).setDataVector(
                (Vector) cocktailDecoVector,
                new Vector(Arrays.asList(deliverableTableColumn)));
    }//GEN-LAST:event_removeDecoButtonActionPerformed

    private void addDecoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDecoButtonActionPerformed
        List<List> availableDecoVector = ((DefaultTableModel) avalaibleDecoList.getModel()).getDataVector();
        List<List> cocktailDecoVector = ((DefaultTableModel) cocktailDecoList.getModel()).getDataVector();
        int row = avalaibleDecoList.getSelectedRow();
        List deco = availableDecoVector.get(row);

        Long decoID = (Long) deco.get(0);
        DecorationEntity decoEntity = TchinTchinAdminFrame.adminFacade.getDecoration(decoID);
        if (currentCocktail.getDeliverables() == null) {
            currentCocktail.setDeliverables((List) new ArrayList<>());
        }
        currentCocktail.getDeliverables().add(decoEntity);

        cocktailDecoVector.add(deco);
        availableDecoVector.remove(deco);


        ((DefaultTableModel) avalaibleDecoList.getModel()).setDataVector(
                (Vector) availableDecoVector,
                new Vector(Arrays.asList(deliverableTableColumn)));
        ((DefaultTableModel) cocktailDecoList.getModel()).setDataVector(
                (Vector) cocktailDecoVector,
                new Vector(Arrays.asList(deliverableTableColumn)));
    }//GEN-LAST:event_addDecoButtonActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        /* Clear current content */
        ((DefaultTableModel) cocktailTable.getModel()).setDataVector(
                new Object[][]{},
                cocktailTableColumn);

        ((DefaultTableModel) avalaibleBevList.getModel()).setDataVector(
                new Object[][]{},
                deliverableTableColumn);

        ((DefaultTableModel) avalaibleDecoList.getModel()).setDataVector(
                new Object[][]{},
                deliverableTableColumn);

        /* Fetch new content */
        DefaultTableModel tableModel;

        List<CocktailEntity> cocktails;
        cocktails = (List<CocktailEntity>) TchinTchinAdminFrame.adminFacade.getAllCocktails();
        for (int i = 0; i < cocktails.size(); i++) {
            addCocktailToTable(cocktails.get(i));
        }

        tableModel = (DefaultTableModel) avalaibleBevList.getModel();

        /* Display available Deliverable */
        Iterator<BeverageEntity> beverages;
        beverages = TchinTchinAdminFrame.adminFacade.getAllBeverages().iterator();
        while (beverages.hasNext()) {
            BeverageEntity bev = beverages.next();
            tableModel.addRow(new Object[]{bev.getID(), bev.getName()});
        }

        tableModel = (DefaultTableModel) avalaibleDecoList.getModel();
        /* Display available Decoration */
        Iterator<DecorationEntity> decos;
        decos = TchinTchinAdminFrame.adminFacade.getAllDecorations().iterator();
        while (decos.hasNext()) {
            DecorationEntity deco = decos.next();
            tableModel.addRow(new Object[]{deco.getID(), deco.getName()});
        }

        /* Create combobox content */
        cocktailFlavorCombo.setModel(new DefaultComboBoxModel(CocktailFlavorEnum.values()));
        cocktailPowerCombo.setModel(new DefaultComboBoxModel(CocktailPowerEnum.values()));
    }//GEN-LAST:event_formComponentShown

    private void cocktailTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cocktailTableMouseClicked
        cancelButtonActionPerformed(null);
        int i = cocktailTable.getSelectedRow();
        if (i >= 0) {
            TableModel model = cocktailTable.getModel();
            currentCocktail.setID((Long) model.getValueAt(i, 0));
            currentCocktail = TchinTchinAdminFrame.adminFacade.getCocktailFull(currentCocktail);

            /* Display cocktail informations */
            cocktailNameField.setText(currentCocktail.getName());
            cocktailPhotoField.setText(currentCocktail.getPhotoURI());
            cocktailFlavorCombo.setSelectedItem(currentCocktail.getFlavor());
            cocktailPowerCombo.setSelectedItem(currentCocktail.getPower());
            cocktailRecipeText.setText(currentCocktail.getRecipe());
            // Display list of deliverables
            List<List> availableBevVector = ((DefaultTableModel) avalaibleBevList.getModel()).getDataVector();
            List<List> cocktailBevVector = ((DefaultTableModel) cocktailBevList.getModel()).getDataVector();
            List<List> availableDecoVector = ((DefaultTableModel) avalaibleDecoList.getModel()).getDataVector();
            List<List> cocktailDecoVector = ((DefaultTableModel) cocktailDecoList.getModel()).getDataVector();
            Iterator<Deliverable> deliverables = currentCocktail.getDeliverables().iterator();
            while (deliverables.hasNext()) {
                Deliverable deliverable = deliverables.next();
                if (deliverable instanceof BeverageEntity) {
                    BeverageEntity bev = (BeverageEntity) deliverable;

                    Iterator avalaibleBevIt = availableBevVector.iterator();
                    boolean found = false;
                    List bevInList = null;
                    while (avalaibleBevIt.hasNext() && !found) {
                        bevInList = (List) avalaibleBevIt.next();
                        if ((Long) (bevInList.get(0)) == currentCocktail.getID()) {
                            found = true;
                        }
                    }
                    cocktailBevVector.add(bevInList);
                    availableBevVector.remove(bevInList);
                } else if (deliverable instanceof DecorationEntity) {
                    DecorationEntity deco = (DecorationEntity) deliverable;

                    Iterator avalaibleDecoIt = availableDecoVector.iterator();
                    boolean found = false;
                    List decoInList = null;
                    while (avalaibleDecoIt.hasNext() && !found) {
                        decoInList = (List) avalaibleDecoIt.next();
                        if ((Long) (decoInList.get(0)) == currentCocktail.getID()) {
                            found = true;
                        }
                    }
                    cocktailDecoVector.add(decoInList);
                    availableDecoVector.remove(decoInList);
                }
            }

            ((DefaultTableModel) avalaibleBevList.getModel()).setDataVector(
                    (Vector) availableBevVector,
                    new Vector<>(Arrays.asList(deliverableTableColumn)));
            ((DefaultTableModel) cocktailBevList.getModel()).setDataVector(
                    (Vector) cocktailBevVector,
                    new Vector<>(Arrays.asList(deliverableTableColumn)));
            ((DefaultTableModel) avalaibleDecoList.getModel()).setDataVector(
                    (Vector) availableDecoVector,
                    new Vector<>(Arrays.asList(deliverableTableColumn)));
            ((DefaultTableModel) cocktailDecoList.getModel()).setDataVector(
                    (Vector) cocktailDecoVector,
                    new Vector<>(Arrays.asList(deliverableTableColumn)));

            validateButton.setText("Modifier");
            validateButton.setEnabled(true);
            cancelButton.setEnabled(true);
            deleteButton.setEnabled(true);
        }
    }//GEN-LAST:event_cocktailTableMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBeverageButton;
    private javax.swing.JButton addDecoButton;
    private javax.swing.JTable avalaibleBevList;
    private javax.swing.JTable avalaibleDecoList;
    private javax.swing.JPanel beveragesPanel;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTable cocktailBevList;
    private javax.swing.JTable cocktailDecoList;
    private javax.swing.JComboBox cocktailFlavorCombo;
    private javax.swing.JTextField cocktailNameField;
    private javax.swing.JTextField cocktailPhotoField;
    private javax.swing.JComboBox cocktailPowerCombo;
    private javax.swing.JTextArea cocktailRecipeText;
    private javax.swing.JTable cocktailTable;
    private javax.swing.JPanel decoPanel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JPanel fieldsPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JButton removeBeverageButton;
    private javax.swing.JButton removeDecoButton;
    private javax.swing.JButton validateButton;
    // End of variables declaration//GEN-END:variables
    private CocktailEntity currentCocktail = new CocktailEntity();
    private String[] cocktailTableColumn = new String[]{"ID", "Nom", "Prix", "Photo", "Goût", "Puissance"};
    private String[] deliverableTableColumn = new String[]{"ID", "Nom"};

    private void addCocktailToTable(CocktailEntity entity) {
        DefaultTableModel tableModel = (DefaultTableModel) cocktailTable.getModel();
        Object[] row = {entity.getID(),
            entity.getName(),
            entity.getPrice(),
            entity.getPhotoURI(),
            entity.getFlavor().toString(),
            entity.getPower().toString()};
        tableModel.addRow(row);
        int rowIdx = tableModel.getRowCount() - 1;
        tableModel.fireTableRowsInserted(rowIdx, rowIdx);
    }
}
